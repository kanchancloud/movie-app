(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[54304],{145862:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return vn}});var o,a,l,i,s=t(827378),r=t(494616),u=t(25778),c=t(975536),g=t(795502),d=t(41653),p=t(831933),m=t(709284),h=t(954159),v=t(824246);var f,b,T,B,k=t(894586),x=t(293318),y=t(423307),w=t(242889),A=t(265437);var j,F,I,z,C,S,G=t(131557),R=t(869352),M=t(398977);var V,H,D,Z,L,P,_=t(92863),q=t(39922),E=t(731527),O=t(568075);var N,J=t(467778);var U,Q,W,Y,K=t(295649),X=t(375205);var $,nn,en,tn,on,an,ln,sn,rn=t(290763),un=t(610870),cn=t(709497),gn=(0,rn.ZP)(h.Z)((function(n){var e=n.theme;return{"& .MuiToggleButtonGroup-grouped":{margin:e.spacing(.5),border:0,"&.Mui-disabled":{border:0},"&:not(:first-of-type)":{borderRadius:e.shape.borderRadius},"&:first-of-type":{borderRadius:e.shape.borderRadius}}}}));var dn,pn={en:{description:"Toggle buttons can be used to group related options.",location:"/docs/data/material/components/toggle-button/toggle-button.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Toggle Buttons</h1><p class="description">Toggle buttons can be used to group related options.</p>\n\n<p>To emphasize groups of related Toggle buttons,\na group should share a common container.\nThe <code>ToggleButtonGroup</code> controls the selected state of its child buttons when given its own <code>value</code> prop.</p>\n',{component:"modules/components/ComponentLinkHeader.js"},'<h2 id="heading-exclusive-selection"><span class="anchor-link" id="exclusive-selection"></span>Exclusive selection<a aria-labelledby="heading-exclusive-selection" class="anchor-link-style" href="#exclusive-selection" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>With exclusive selection, selecting one option deselects any other.</p>\n<p>In this example, text justification toggle buttons present options for left, center, right, and fully justified text (disabled), with only one item available for selection at a time.</p>\n<p><strong>Note</strong>: Exclusive selection does not enforce that a button must be active. For that effect see <a href="#enforce-value-set">enforce value set</a>.</p>\n',{demo:"ToggleButtons.js"},'<h2 id="heading-multiple-selection"><span class="anchor-link" id="multiple-selection"></span>Multiple selection<a aria-labelledby="heading-multiple-selection" class="anchor-link-style" href="#multiple-selection" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Multiple selection allows for logically-grouped options, like bold, italic, and underline, to have multiple options selected.</p>\n',{demo:"ToggleButtonsMultiple.js"},'<h2 id="heading-size"><span class="anchor-link" id="size"></span>Size<a aria-labelledby="heading-size" class="anchor-link-style" href="#size" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>For larger or smaller buttons, use the <code>size</code> prop.</p>\n',{demo:"ToggleButtonSizes.js"},'<h2 id="heading-color"><span class="anchor-link" id="color"></span>Color<a aria-labelledby="heading-color" class="anchor-link-style" href="#color" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"ColorToggleButton.js"},'<h2 id="heading-vertical-buttons"><span class="anchor-link" id="vertical-buttons"></span>Vertical buttons<a aria-labelledby="heading-vertical-buttons" class="anchor-link-style" href="#vertical-buttons" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The buttons can be stacked vertically with the <code>orientation</code> prop set to &quot;vertical&quot;.</p>\n',{demo:"VerticalToggleButtons.js"},'<h2 id="heading-enforce-value-set"><span class="anchor-link" id="enforce-value-set"></span>Enforce value set<a aria-labelledby="heading-enforce-value-set" class="anchor-link-style" href="#enforce-value-set" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If you want to enforce that at least one button must be active, you can adapt your handleChange function.</p>\n<pre><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">handleAlignment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> newAlignment</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>newAlignment <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setAlignment</span><span class="token punctuation">(</span>newAlignment<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">handleDevices</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> newDevices</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>newDevices<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setDevices</span><span class="token punctuation">(</span>newDevices<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n',{demo:"ToggleButtonNotEmpty.js"},'<h2 id="heading-standalone-toggle-button"><span class="anchor-link" id="standalone-toggle-button"></span>Standalone toggle button<a aria-labelledby="heading-standalone-toggle-button" class="anchor-link-style" href="#standalone-toggle-button" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"StandaloneToggleButton.js"},'<h2 id="heading-customization"><span class="anchor-link" id="customization"></span>Customization<a aria-labelledby="heading-customization" class="anchor-link-style" href="#customization" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Here is an example of customizing the component.\nYou can learn more about this in the <a href="/material-ui/customization/how-to-customize/">overrides documentation page</a>.</p>\n',{demo:"CustomizedDividers.js",bg:!0},'<h2 id="heading-accessibility"><span class="anchor-link" id="accessibility"></span>Accessibility<a aria-labelledby="heading-accessibility" class="anchor-link-style" href="#accessibility" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="heading-aria"><span class="anchor-link" id="aria"></span>ARIA<a aria-labelledby="heading-aria" class="anchor-link-style" href="#aria" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><ul>\n<li>ToggleButtonGroup has <code>role=&quot;group&quot;</code>. You should provide an accessible label with <code>aria-label=&quot;label&quot;</code>, <code>aria-labelledby=&quot;id&quot;</code> or <code>&lt;label&gt;</code>.</li>\n<li>ToggleButton sets <code>aria-pressed=&quot;&lt;bool&gt;&quot;</code> according to the button state. You should label each button with <code>aria-label</code>.</li>\n</ul>\n<h3 id="heading-keyboard"><span class="anchor-link" id="keyboard"></span>Keyboard<a aria-labelledby="heading-keyboard" class="anchor-link-style" href="#keyboard" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>At present, toggle buttons are in DOM order. Navigate between them with the tab key. The button behavior follows standard keyboard semantics.</p>\n','<h2 id="heading-api"><span class="anchor-link" id="api"></span>API<a aria-labelledby="heading-api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><a href="/material-ui/api/toggle-button/"><code>&lt;ToggleButton /&gt;</code></a></li>\n<li><a href="/material-ui/api/toggle-button-group/"><code>&lt;ToggleButtonGroup /&gt;</code></a></li>\n</ul>\n'],toc:[{text:"Exclusive selection",level:2,hash:"exclusive-selection",children:[]},{text:"Multiple selection",level:2,hash:"multiple-selection",children:[]},{text:"Size",level:2,hash:"size",children:[]},{text:"Color",level:2,hash:"color",children:[]},{text:"Vertical buttons",level:2,hash:"vertical-buttons",children:[]},{text:"Enforce value set",level:2,hash:"enforce-value-set",children:[]},{text:"Standalone toggle button",level:2,hash:"standalone-toggle-button",children:[]},{text:"Customization",level:2,hash:"customization",children:[]},{text:"Accessibility",level:2,hash:"accessibility",children:[{text:"ARIA",level:3,hash:"aria"},{text:"Keyboard",level:3,hash:"keyboard"}]},{text:"API",level:2,hash:"api",children:[]}],title:"Toggle Button React component",headers:{product:"material-ui",title:"Toggle Button React component",components:["ToggleButton","ToggleButtonGroup"],githubLabel:"component: toggle button",materialDesign:"https://material.io/components/buttons#toggle-button"}},pt:{description:"Os bot\xf5es de altern\xe2ncia podem ser usados para agrupar op\xe7\xf5es relacionadas.",location:"/docs/data/material/components/toggle-button/toggle-button-pt.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Bot\xf5es de altern\xe2ncia</h1><p class="description">Os bot\xf5es de altern\xe2ncia podem ser usados para agrupar op\xe7\xf5es relacionadas.</p>\n\n<p>Para enfatizar grupos de <a href="https://material.io/components/buttons#toggle-button" target="_blank" rel="noopener nofollow">bot\xf5es de altern\xe2ncia</a> relacionados, o grupo deve ter um cont\xeainer em comum. O <code>ToggleButtonGroup</code> controla o estado selecionado de seus bot\xf5es filhos atrav\xe9s de sua propriedade <code>value</code>.</p>\n',{component:"modules/components/ComponentLinkHeader.js"},'<h2 id="heading-exclusive-selection"><span class="anchor-link" id="exclusive-selection"></span>Sele\xe7\xe3o exclusiva<a aria-labelledby="heading-exclusive-selection" class="anchor-link-style" href="#exclusive-selection" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Com sele\xe7\xe3o exclusiva, selecionar uma op\xe7\xe3o desseleciona qualquer outra.</p>\n<p>In this example, text justification toggle buttons present options for left, center, right, and fully justified text (disabled), with only one item available for selection at a time.</p>\n<p><strong>Note</strong>: Exclusive selection does not enforce that a button must be active. For that effect see <a href="#enforce-value-set">enforce value set</a>.</p>\n',{demo:"ToggleButtons.js"},'<h2 id="heading-multiple-selection"><span class="anchor-link" id="multiple-selection"></span>Sele\xe7\xe3o m\xfaltipla<a aria-labelledby="heading-multiple-selection" class="anchor-link-style" href="#multiple-selection" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Multiple selection allows for logically-grouped options, like bold, italic, and underline, to have multiple options selected.</p>\n',{demo:"ToggleButtonsMultiple.js"},'<h2 id="heading-size"><span class="anchor-link" id="size"></span>Tamanho<a aria-labelledby="heading-size" class="anchor-link-style" href="#size" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>For larger or smaller buttons, use the <code>size</code> prop.</p>\n',{demo:"ToggleButtonSizes.js"},'<h2 id="heading-color"><span class="anchor-link" id="color"></span>Cor<a aria-labelledby="heading-color" class="anchor-link-style" href="#color" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"ColorToggleButton.js"},'<h2 id="heading-vertical-buttons"><span class="anchor-link" id="vertical-buttons"></span>Bot\xf5es verticais<a aria-labelledby="heading-vertical-buttons" class="anchor-link-style" href="#vertical-buttons" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The buttons can be stacked vertically with the <code>orientation</code> prop set to &quot;vertical&quot;.</p>\n',{demo:"VerticalToggleButtons.js"},'<h2 id="heading-enforce-value-set"><span class="anchor-link" id="enforce-value-set"></span>For\xe7ar valor definido<a aria-labelledby="heading-enforce-value-set" class="anchor-link-style" href="#enforce-value-set" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If you want to enforce that at least one button must be active, you can adapt your handleChange function.</p>\n<pre><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">handleFormat</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> newFormats</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>newFormats<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setFormats</span><span class="token punctuation">(</span>newFormats<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">handleAlignment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> newAlignment</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>newAlignment <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setAlignment</span><span class="token punctuation">(</span>newAlignment<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n',{demo:"ToggleButtonNotEmpty.js"},'<h2 id="heading-standalone-toggle-button"><span class="anchor-link" id="standalone-toggle-button"></span>Bot\xe3o de altern\xe2ncia aut\xf4nomo<a aria-labelledby="heading-standalone-toggle-button" class="anchor-link-style" href="#standalone-toggle-button" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"StandaloneToggleButton.js"},'<h2 id="heading-customization"><span class="anchor-link" id="customization"></span>Bot\xe3o de altern\xe2ncia customizado<a aria-labelledby="heading-customization" class="anchor-link-style" href="#customization" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Here is an example of customizing the component. You can learn more about this in the <a href="/pt/material-ui/customization/how-to-customize/">overrides documentation page</a>.</p>\n',{demo:"CustomizedDividers.js",bg:!0},'<h2 id="heading-accessibility"><span class="anchor-link" id="accessibility"></span>Acessibilidade<a aria-labelledby="heading-accessibility" class="anchor-link-style" href="#accessibility" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="heading-aria"><span class="anchor-link" id="aria"></span>ARIA<a aria-labelledby="heading-aria" class="anchor-link-style" href="#aria" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><ul>\n<li>ToggleButtonGroup possui <code>role=&quot;group&quot;</code>. Voc\xea deve fornecer um r\xf3tulo acess\xedvel com <code>aria-label=&quot;label&quot;</code>, <code>aria-labelledby=&quot;id&quot;</code> ou <code>&lt;label&gt;</code>.</li>\n<li>ToggleButton define <code>aria-pressed=&quot;&lt;bool&gt;&quot;</code> de acordo com o estado do bot\xe3o. Voc\xea deve rotular cada bot\xe3o com <code>aria-label</code>.</li>\n</ul>\n<h3 id="heading-keyboard"><span class="anchor-link" id="keyboard"></span>Teclado<a aria-labelledby="heading-keyboard" class="anchor-link-style" href="#keyboard" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>At present, toggle buttons are in DOM order. Navigate between them with the tab key. The button behavior follows standard keyboard semantics.</p>\n','<h2 id="heading-api"><span class="anchor-link" id="api"></span>API<a aria-labelledby="heading-api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><a href="/pt/material-ui/api/toggle-button/"><code>&lt;ToggleButton /&gt;</code></a></li>\n<li><a href="/pt/material-ui/api/toggle-button-group/"><code>&lt;ToggleButtonGroup /&gt;</code></a></li>\n</ul>\n'],toc:[{text:"Sele\xe7\xe3o exclusiva",level:2,hash:"exclusive-selection",children:[]},{text:"Sele\xe7\xe3o m\xfaltipla",level:2,hash:"multiple-selection",children:[]},{text:"Tamanho",level:2,hash:"size",children:[]},{text:"Cor",level:2,hash:"color",children:[]},{text:"Bot\xf5es verticais",level:2,hash:"vertical-buttons",children:[]},{text:"For\xe7ar valor definido",level:2,hash:"enforce-value-set",children:[]},{text:"Bot\xe3o de altern\xe2ncia aut\xf4nomo",level:2,hash:"standalone-toggle-button",children:[]},{text:"Bot\xe3o de altern\xe2ncia customizado",level:2,hash:"customization",children:[]},{text:"Acessibilidade",level:2,hash:"accessibility",children:[{text:"ARIA",level:3,hash:"aria"},{text:"Teclado",level:3,hash:"keyboard"}]},{text:"API",level:2,hash:"api",children:[]}],title:"Componente React para Bot\xf5es de Altern\xe2ncia",headers:{product:"material-ui",title:"Componente React para Bot\xf5es de Altern\xe2ncia",components:["ToggleButton","ToggleButtonGroup"],githubLabel:"component: toggle button",materialDesign:"https://material.io/components/buttons#toggle-button"}},zh:{description:"\u5207\u6362\u6309\u94ae\u7ec4\u4ef6\u53ef\u7528\u4e8e\u5bf9\u76f8\u5173\u9009\u9879\u8fdb\u884c\u5206\u7ec4\u3002",location:"/docs/data/material/components/toggle-button/toggle-button-zh.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Toggle Button \u5207\u6362\u6309\u94ae</h1><p class="description">\u5207\u6362\u6309\u94ae\u7ec4\u4ef6\u53ef\u7528\u4e8e\u5bf9\u76f8\u5173\u9009\u9879\u8fdb\u884c\u5206\u7ec4\u3002</p>\n\n<p>\u4e3a\u4e86\u5f3a\u8c03\u7ec4\u5408\u4e4b\u95f4\u7684\u5173\u8054\uff0c\u6bcf\u4e00\u7ec4\u5207\u6362\u6309\u94ae\u5e94\u8be5\u5171\u4eab\u4e00\u4e2a\u5bb9\u5668\u3002 \u5f53\u7ed9\u5b9a\u5207\u6362\u6309\u94ae\u7684 <code>value</code> \u5c5e\u6027\u65f6\uff0c<code>ToggleButtonGroup</code> \u5c31\u53ef\u4ee5\u63a7\u5236\u5176\u5b50\u6309\u94ae\u7684\u9009\u62e9\u72b6\u6001\uff08selected state\uff09\u3002</p>\n',{component:"modules/components/ComponentLinkHeader.js"},'<h2 id="heading-exclusive-selection"><span class="anchor-link" id="exclusive-selection"></span>\u552f\u4e00\u7684\u9009\u62e9<a aria-labelledby="heading-exclusive-selection" class="anchor-link-style" href="#exclusive-selection" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u5728\u552f\u4e00\u7684\u9009\u62e9\u4e2d\uff0c\u9009\u62e9\u4e00\u4e2a\u9009\u9879\u5c31\u4f1a\u53d6\u6d88\u5176\u4ed6\u7684\u9009\u62e9\u72b6\u6001\u3002</p>\n<p>In this example, text justification toggle buttons present options for left, center, right, and fully justified text (disabled), with only one item available for selection at a time.</p>\n<p><strong>Note</strong>: Exclusive selection does not enforce that a button must be active. For that effect see <a href="#enforce-value-set">enforce value set</a>. For that effect see <a href="#enforce-value-set">enforce value set</a>.</p>\n',{demo:"ToggleButtons.js"},'<h2 id="heading-multiple-selection"><span class="anchor-link" id="multiple-selection"></span>\u591a\u9009<a aria-labelledby="heading-multiple-selection" class="anchor-link-style" href="#multiple-selection" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Multiple selection allows for logically-grouped options, like bold, italic, and underline, to have multiple options selected.</p>\n',{demo:"ToggleButtonsMultiple.js"},'<h2 id="heading-size"><span class="anchor-link" id="size"></span>Size \u5927\u5c0f<a aria-labelledby="heading-size" class="anchor-link-style" href="#size" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>For larger or smaller buttons, use the <code>size</code> prop.</p>\n',{demo:"ToggleButtonSizes.js"},'<h2 id="heading-color"><span class="anchor-link" id="color"></span>Color \u989c\u8272<a aria-labelledby="heading-color" class="anchor-link-style" href="#color" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"ColorToggleButton.js"},'<h2 id="heading-vertical-buttons"><span class="anchor-link" id="vertical-buttons"></span>\u5782\u76f4\u6392\u5217\u7684\u6309\u94ae<a aria-labelledby="heading-vertical-buttons" class="anchor-link-style" href="#vertical-buttons" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The buttons can be stacked vertically with the <code>orientation</code> prop set to &quot;vertical&quot;.</p>\n',{demo:"VerticalToggleButtons.js"},'<h2 id="heading-enforce-value-set"><span class="anchor-link" id="enforce-value-set"></span>\u5f3a\u5236\u8bbe\u7f6e\u503c<a aria-labelledby="heading-enforce-value-set" class="anchor-link-style" href="#enforce-value-set" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If you want to enforce that at least one button must be active, you can adapt your handleChange function.</p>\n<pre><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">handleAlignment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> newAlignment</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>newAlignment <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setAlignment</span><span class="token punctuation">(</span>newAlignment<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">handleDevices</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> newDevices</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>newDevices<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setDevices</span><span class="token punctuation">(</span>newDevices<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n',{demo:"ToggleButtonNotEmpty.js"},'<h2 id="heading-standalone-toggle-button"><span class="anchor-link" id="standalone-toggle-button"></span>\u5355\u72ec\u7684\u5207\u6362\u6309\u94ae<a aria-labelledby="heading-standalone-toggle-button" class="anchor-link-style" href="#standalone-toggle-button" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"StandaloneToggleButton.js"},'<h2 id="heading-customization"><span class="anchor-link" id="customization"></span>\u81ea\u5b9a\u4e49\u5207\u6362\u6309\u94ae<a aria-labelledby="heading-customization" class="anchor-link-style" href="#customization" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Here is an example of customizing the component. Here is an example of customizing the component. You can learn more about this in the <a href="/zh/material-ui/customization/how-to-customize/">overrides documentation page</a>.</p>\n',{demo:"CustomizedDividers.js",bg:!0},'<h2 id="heading-accessibility"><span class="anchor-link" id="accessibility"></span>\u65e0\u969c\u788d\u8bbe\u8ba1<a aria-labelledby="heading-accessibility" class="anchor-link-style" href="#accessibility" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="heading-aria"><span class="anchor-link" id="aria"></span>ARIA<a aria-labelledby="heading-aria" class="anchor-link-style" href="#aria" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><ul>\n<li>ToggleButtonGroup \u5177\u6709 <code>role=&quot;group&quot;</code>\u3002 \u8bf7\u60a8\u63d0\u4f9b\u4e00\u4e2a\u53ef\u8bbf\u95ee\u7684\u6807\u7b7e\uff0c\u6807\u7b7e\u5305\u542b <code>aria-label=&quot;label&quot;</code>\uff0c<code>aria-labelledby=&quot;id&quot;</code> \u6216 <code>&lt;label&gt;</code>\u3002</li>\n<li>ToggleButton \u6839\u636e\u6309\u94ae\u7684\u72b6\u6001\u6765\u8bbe\u7f6e <code>aria-pressed=&quot;&lt;bool&gt;&quot;</code>\u3002 \u60a8\u5e94\u8be5\u7528 <code>aria-label</code> \u6807\u8bb0\u6bcf\u4e2a\u6309\u94ae\u3002</li>\n</ul>\n<h3 id="heading-keyboard"><span class="anchor-link" id="keyboard"></span>\u952e\u76d8\u8f93\u5165<a aria-labelledby="heading-keyboard" class="anchor-link-style" href="#keyboard" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>At present, toggle buttons are in DOM order. Navigate between them with the tab key. The button behavior follows standard keyboard semantics. Navigate between them with the tab key. The button behavior follows standard keyboard semantics.</p>\n','<h2 id="heading-api"><span class="anchor-link" id="api"></span>API<a aria-labelledby="heading-api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><a href="/zh/material-ui/api/toggle-button/"><code>&lt;ToggleButton /&gt;</code></a></li>\n<li><a href="/zh/material-ui/api/toggle-button-group/"><code>&lt;ToggleButtonGroup /&gt;</code></a></li>\n</ul>\n'],toc:[{text:"\u552f\u4e00\u7684\u9009\u62e9",level:2,hash:"exclusive-selection",children:[]},{text:"\u591a\u9009",level:2,hash:"multiple-selection",children:[]},{text:"Size \u5927\u5c0f",level:2,hash:"size",children:[]},{text:"Color \u989c\u8272",level:2,hash:"color",children:[]},{text:"\u5782\u76f4\u6392\u5217\u7684\u6309\u94ae",level:2,hash:"vertical-buttons",children:[]},{text:"\u5f3a\u5236\u8bbe\u7f6e\u503c",level:2,hash:"enforce-value-set",children:[]},{text:"\u5355\u72ec\u7684\u5207\u6362\u6309\u94ae",level:2,hash:"standalone-toggle-button",children:[]},{text:"\u81ea\u5b9a\u4e49\u5207\u6362\u6309\u94ae",level:2,hash:"customization",children:[]},{text:"\u65e0\u969c\u788d\u8bbe\u8ba1",level:2,hash:"accessibility",children:[{text:"ARIA",level:3,hash:"aria"},{text:"\u952e\u76d8\u8f93\u5165",level:3,hash:"keyboard"}]},{text:"API",level:2,hash:"api",children:[]}],title:"React Toggle Button\uff08\u5207\u6362\u6309\u94ae\uff09\u7ec4\u4ef6",headers:{product:"material-ui",title:"React Toggle Button\uff08\u5207\u6362\u6309\u94ae\uff09\u7ec4\u4ef6",components:["ToggleButton","ToggleButtonGroup"],githubLabel:"component: toggle button",materialDesign:"https://material.io/components/buttons#toggle-button"}}},mn={"ToggleButtons.js":{module:"./ToggleButtons.js",raw:'import * as React from \'react\';\nimport FormatAlignLeftIcon from \'@mui/icons-material/FormatAlignLeft\';\nimport FormatAlignCenterIcon from \'@mui/icons-material/FormatAlignCenter\';\nimport FormatAlignRightIcon from \'@mui/icons-material/FormatAlignRight\';\nimport FormatAlignJustifyIcon from \'@mui/icons-material/FormatAlignJustify\';\nimport ToggleButton from \'@mui/material/ToggleButton\';\nimport ToggleButtonGroup from \'@mui/material/ToggleButtonGroup\';\n\nexport default function ToggleButtons() {\n  const [alignment, setAlignment] = React.useState(\'left\');\n\n  const handleAlignment = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  return (\n    <ToggleButtonGroup\n      value={alignment}\n      exclusive\n      onChange={handleAlignment}\n      aria-label="text alignment"\n    >\n      <ToggleButton value="left" aria-label="left aligned">\n        <FormatAlignLeftIcon />\n      </ToggleButton>\n      <ToggleButton value="center" aria-label="centered">\n        <FormatAlignCenterIcon />\n      </ToggleButton>\n      <ToggleButton value="right" aria-label="right aligned">\n        <FormatAlignRightIcon />\n      </ToggleButton>\n      <ToggleButton value="justify" aria-label="justified" disabled>\n        <FormatAlignJustifyIcon />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n',moduleTS:"./ToggleButtons.js",rawTS:'import * as React from \'react\';\nimport FormatAlignLeftIcon from \'@mui/icons-material/FormatAlignLeft\';\nimport FormatAlignCenterIcon from \'@mui/icons-material/FormatAlignCenter\';\nimport FormatAlignRightIcon from \'@mui/icons-material/FormatAlignRight\';\nimport FormatAlignJustifyIcon from \'@mui/icons-material/FormatAlignJustify\';\nimport ToggleButton from \'@mui/material/ToggleButton\';\nimport ToggleButtonGroup from \'@mui/material/ToggleButtonGroup\';\n\nexport default function ToggleButtons() {\n  const [alignment, setAlignment] = React.useState<string | null>(\'left\');\n\n  const handleAlignment = (\n    event: React.MouseEvent<HTMLElement>,\n    newAlignment: string | null,\n  ) => {\n    setAlignment(newAlignment);\n  };\n\n  return (\n    <ToggleButtonGroup\n      value={alignment}\n      exclusive\n      onChange={handleAlignment}\n      aria-label="text alignment"\n    >\n      <ToggleButton value="left" aria-label="left aligned">\n        <FormatAlignLeftIcon />\n      </ToggleButton>\n      <ToggleButton value="center" aria-label="centered">\n        <FormatAlignCenterIcon />\n      </ToggleButton>\n      <ToggleButton value="right" aria-label="right aligned">\n        <FormatAlignRightIcon />\n      </ToggleButton>\n      <ToggleButton value="justify" aria-label="justified" disabled>\n        <FormatAlignJustifyIcon />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n'},"ToggleButtonsMultiple.js":{module:"./ToggleButtonsMultiple.js",raw:"import * as React from 'react';\nimport FormatBoldIcon from '@mui/icons-material/FormatBold';\nimport FormatItalicIcon from '@mui/icons-material/FormatItalic';\nimport FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';\nimport FormatColorFillIcon from '@mui/icons-material/FormatColorFill';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nexport default function ToggleButtonsMultiple() {\n  const [formats, setFormats] = React.useState(() => ['bold', 'italic']);\n\n  const handleFormat = (event, newFormats) => {\n    setFormats(newFormats);\n  };\n\n  return (\n    <ToggleButtonGroup\n      value={formats}\n      onChange={handleFormat}\n      aria-label=\"text formatting\"\n    >\n      <ToggleButton value=\"bold\" aria-label=\"bold\">\n        <FormatBoldIcon />\n      </ToggleButton>\n      <ToggleButton value=\"italic\" aria-label=\"italic\">\n        <FormatItalicIcon />\n      </ToggleButton>\n      <ToggleButton value=\"underlined\" aria-label=\"underlined\">\n        <FormatUnderlinedIcon />\n      </ToggleButton>\n      <ToggleButton value=\"color\" aria-label=\"color\" disabled>\n        <FormatColorFillIcon />\n        <ArrowDropDownIcon />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n",moduleTS:"./ToggleButtonsMultiple.js",rawTS:"import * as React from 'react';\nimport FormatBoldIcon from '@mui/icons-material/FormatBold';\nimport FormatItalicIcon from '@mui/icons-material/FormatItalic';\nimport FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';\nimport FormatColorFillIcon from '@mui/icons-material/FormatColorFill';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nexport default function ToggleButtonsMultiple() {\n  const [formats, setFormats] = React.useState(() => ['bold', 'italic']);\n\n  const handleFormat = (\n    event: React.MouseEvent<HTMLElement>,\n    newFormats: string[],\n  ) => {\n    setFormats(newFormats);\n  };\n\n  return (\n    <ToggleButtonGroup\n      value={formats}\n      onChange={handleFormat}\n      aria-label=\"text formatting\"\n    >\n      <ToggleButton value=\"bold\" aria-label=\"bold\">\n        <FormatBoldIcon />\n      </ToggleButton>\n      <ToggleButton value=\"italic\" aria-label=\"italic\">\n        <FormatItalicIcon />\n      </ToggleButton>\n      <ToggleButton value=\"underlined\" aria-label=\"underlined\">\n        <FormatUnderlinedIcon />\n      </ToggleButton>\n      <ToggleButton value=\"color\" aria-label=\"color\" disabled>\n        <FormatColorFillIcon />\n        <ArrowDropDownIcon />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n"},"VerticalToggleButtons.js":{module:"./VerticalToggleButtons.js",raw:"import * as React from 'react';\nimport ViewListIcon from '@mui/icons-material/ViewList';\nimport ViewModuleIcon from '@mui/icons-material/ViewModule';\nimport ViewQuiltIcon from '@mui/icons-material/ViewQuilt';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nexport default function VerticalToggleButtons() {\n  const [view, setView] = React.useState('list');\n\n  const handleChange = (event, nextView) => {\n    setView(nextView);\n  };\n\n  return (\n    <ToggleButtonGroup\n      orientation=\"vertical\"\n      value={view}\n      exclusive\n      onChange={handleChange}\n    >\n      <ToggleButton value=\"list\" aria-label=\"list\">\n        <ViewListIcon />\n      </ToggleButton>\n      <ToggleButton value=\"module\" aria-label=\"module\">\n        <ViewModuleIcon />\n      </ToggleButton>\n      <ToggleButton value=\"quilt\" aria-label=\"quilt\">\n        <ViewQuiltIcon />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n",jsxPreview:'<ToggleButtonGroup\n  orientation="vertical"\n  value={view}\n  exclusive\n  onChange={handleChange}\n>\n  <ToggleButton value="list" aria-label="list">\n    <ViewListIcon />\n  </ToggleButton>\n  <ToggleButton value="module" aria-label="module">\n    <ViewModuleIcon />\n  </ToggleButton>\n  <ToggleButton value="quilt" aria-label="quilt">\n    <ViewQuiltIcon />\n  </ToggleButton>\n</ToggleButtonGroup>',moduleTS:"./VerticalToggleButtons.js",rawTS:"import * as React from 'react';\nimport ViewListIcon from '@mui/icons-material/ViewList';\nimport ViewModuleIcon from '@mui/icons-material/ViewModule';\nimport ViewQuiltIcon from '@mui/icons-material/ViewQuilt';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nexport default function VerticalToggleButtons() {\n  const [view, setView] = React.useState('list');\n\n  const handleChange = (event: React.MouseEvent<HTMLElement>, nextView: string) => {\n    setView(nextView);\n  };\n\n  return (\n    <ToggleButtonGroup\n      orientation=\"vertical\"\n      value={view}\n      exclusive\n      onChange={handleChange}\n    >\n      <ToggleButton value=\"list\" aria-label=\"list\">\n        <ViewListIcon />\n      </ToggleButton>\n      <ToggleButton value=\"module\" aria-label=\"module\">\n        <ViewModuleIcon />\n      </ToggleButton>\n      <ToggleButton value=\"quilt\" aria-label=\"quilt\">\n        <ViewQuiltIcon />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n"},"ColorToggleButton.js":{module:"./ColorToggleButton.js",raw:"import * as React from 'react';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nexport default function ColorToggleButton() {\n  const [alignment, setAlignment] = React.useState('web');\n\n  const handleChange = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  return (\n    <ToggleButtonGroup\n      color=\"primary\"\n      value={alignment}\n      exclusive\n      onChange={handleChange}\n    >\n      <ToggleButton value=\"web\">Web</ToggleButton>\n      <ToggleButton value=\"android\">Android</ToggleButton>\n      <ToggleButton value=\"ios\">iOS</ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n",jsxPreview:'<ToggleButtonGroup\n  color="primary"\n  value={alignment}\n  exclusive\n  onChange={handleChange}\n>\n  <ToggleButton value="web">Web</ToggleButton>\n  <ToggleButton value="android">Android</ToggleButton>\n  <ToggleButton value="ios">iOS</ToggleButton>\n</ToggleButtonGroup>',moduleTS:"./ColorToggleButton.js",rawTS:"import * as React from 'react';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nexport default function ColorToggleButton() {\n  const [alignment, setAlignment] = React.useState('web');\n\n  const handleChange = (\n    event: React.MouseEvent<HTMLElement>,\n    newAlignment: string,\n  ) => {\n    setAlignment(newAlignment);\n  };\n\n  return (\n    <ToggleButtonGroup\n      color=\"primary\"\n      value={alignment}\n      exclusive\n      onChange={handleChange}\n    >\n      <ToggleButton value=\"web\">Web</ToggleButton>\n      <ToggleButton value=\"android\">Android</ToggleButton>\n      <ToggleButton value=\"ios\">iOS</ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n"},"ToggleButtonNotEmpty.js":{module:"./ToggleButtonNotEmpty.js",raw:'import * as React from \'react\';\nimport FormatAlignLeftIcon from \'@mui/icons-material/FormatAlignLeft\';\nimport FormatAlignCenterIcon from \'@mui/icons-material/FormatAlignCenter\';\nimport FormatAlignRightIcon from \'@mui/icons-material/FormatAlignRight\';\nimport LaptopIcon from \'@mui/icons-material/Laptop\';\nimport TvIcon from \'@mui/icons-material/Tv\';\nimport PhoneAndroidIcon from \'@mui/icons-material/PhoneAndroid\';\nimport Stack from \'@mui/material/Stack\';\nimport ToggleButton from \'@mui/material/ToggleButton\';\nimport ToggleButtonGroup from \'@mui/material/ToggleButtonGroup\';\n\nexport default function ToggleButtonNotEmpty() {\n  const [alignment, setAlignment] = React.useState(\'left\');\n  const [devices, setDevices] = React.useState(() => [\'phone\']);\n\n  const handleAlignment = (event, newAlignment) => {\n    if (newAlignment !== null) {\n      setAlignment(newAlignment);\n    }\n  };\n\n  const handleDevices = (event, newDevices) => {\n    if (newDevices.length) {\n      setDevices(newDevices);\n    }\n  };\n\n  return (\n    <Stack direction="row" spacing={4}>\n      <ToggleButtonGroup\n        value={alignment}\n        exclusive\n        onChange={handleAlignment}\n        aria-label="text alignment"\n      >\n        <ToggleButton value="left" aria-label="left aligned">\n          <FormatAlignLeftIcon />\n        </ToggleButton>\n        <ToggleButton value="center" aria-label="centered">\n          <FormatAlignCenterIcon />\n        </ToggleButton>\n        <ToggleButton value="right" aria-label="right aligned">\n          <FormatAlignRightIcon />\n        </ToggleButton>\n      </ToggleButtonGroup>\n\n      <ToggleButtonGroup\n        value={devices}\n        onChange={handleDevices}\n        aria-label="device"\n      >\n        <ToggleButton value="laptop" aria-label="laptop">\n          <LaptopIcon />\n        </ToggleButton>\n        <ToggleButton value="tv" aria-label="tv">\n          <TvIcon />\n        </ToggleButton>\n        <ToggleButton value="phone" aria-label="phone">\n          <PhoneAndroidIcon />\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </Stack>\n  );\n}\n',moduleTS:"./ToggleButtonNotEmpty.js",rawTS:'import * as React from \'react\';\nimport FormatAlignLeftIcon from \'@mui/icons-material/FormatAlignLeft\';\nimport FormatAlignCenterIcon from \'@mui/icons-material/FormatAlignCenter\';\nimport FormatAlignRightIcon from \'@mui/icons-material/FormatAlignRight\';\nimport LaptopIcon from \'@mui/icons-material/Laptop\';\nimport TvIcon from \'@mui/icons-material/Tv\';\nimport PhoneAndroidIcon from \'@mui/icons-material/PhoneAndroid\';\nimport Stack from \'@mui/material/Stack\';\nimport ToggleButton from \'@mui/material/ToggleButton\';\nimport ToggleButtonGroup from \'@mui/material/ToggleButtonGroup\';\n\nexport default function ToggleButtonNotEmpty() {\n  const [alignment, setAlignment] = React.useState(\'left\');\n  const [devices, setDevices] = React.useState(() => [\'phone\']);\n\n  const handleAlignment = (\n    event: React.MouseEvent<HTMLElement>,\n    newAlignment: string | null,\n  ) => {\n    if (newAlignment !== null) {\n      setAlignment(newAlignment);\n    }\n  };\n\n  const handleDevices = (\n    event: React.MouseEvent<HTMLElement>,\n    newDevices: string[],\n  ) => {\n    if (newDevices.length) {\n      setDevices(newDevices);\n    }\n  };\n\n  return (\n    <Stack direction="row" spacing={4}>\n      <ToggleButtonGroup\n        value={alignment}\n        exclusive\n        onChange={handleAlignment}\n        aria-label="text alignment"\n      >\n        <ToggleButton value="left" aria-label="left aligned">\n          <FormatAlignLeftIcon />\n        </ToggleButton>\n        <ToggleButton value="center" aria-label="centered">\n          <FormatAlignCenterIcon />\n        </ToggleButton>\n        <ToggleButton value="right" aria-label="right aligned">\n          <FormatAlignRightIcon />\n        </ToggleButton>\n      </ToggleButtonGroup>\n\n      <ToggleButtonGroup\n        value={devices}\n        onChange={handleDevices}\n        aria-label="device"\n      >\n        <ToggleButton value="laptop" aria-label="laptop">\n          <LaptopIcon />\n        </ToggleButton>\n        <ToggleButton value="tv" aria-label="tv">\n          <TvIcon />\n        </ToggleButton>\n        <ToggleButton value="phone" aria-label="phone">\n          <PhoneAndroidIcon />\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </Stack>\n  );\n}\n'},"StandaloneToggleButton.js":{module:"./StandaloneToggleButton.js",raw:"import * as React from 'react';\nimport CheckIcon from '@mui/icons-material/Check';\nimport ToggleButton from '@mui/material/ToggleButton';\n\nexport default function StandaloneToggleButton() {\n  const [selected, setSelected] = React.useState(false);\n\n  return (\n    <ToggleButton\n      value=\"check\"\n      selected={selected}\n      onChange={() => {\n        setSelected(!selected);\n      }}\n    >\n      <CheckIcon />\n    </ToggleButton>\n  );\n}\n",jsxPreview:'<ToggleButton\n  value="check"\n  selected={selected}\n  onChange={() => {\n    setSelected(!selected);\n  }}\n>\n  <CheckIcon />\n</ToggleButton>',moduleTS:"./StandaloneToggleButton.js",rawTS:"import * as React from 'react';\nimport CheckIcon from '@mui/icons-material/Check';\nimport ToggleButton from '@mui/material/ToggleButton';\n\nexport default function StandaloneToggleButton() {\n  const [selected, setSelected] = React.useState(false);\n\n  return (\n    <ToggleButton\n      value=\"check\"\n      selected={selected}\n      onChange={() => {\n        setSelected(!selected);\n      }}\n    >\n      <CheckIcon />\n    </ToggleButton>\n  );\n}\n"},"ToggleButtonSizes.js":{module:"./ToggleButtonSizes.js",raw:"import * as React from 'react';\nimport FormatAlignLeftIcon from '@mui/icons-material/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@mui/icons-material/FormatAlignCenter';\nimport FormatAlignRightIcon from '@mui/icons-material/FormatAlignRight';\nimport FormatAlignJustifyIcon from '@mui/icons-material/FormatAlignJustify';\nimport Box from '@mui/material/Box';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nexport default function ToggleButtonSizes() {\n  const [alignment, setAlignment] = React.useState('left');\n\n  const handleChange = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  const children = [\n    <ToggleButton value=\"left\" key=\"left\">\n      <FormatAlignLeftIcon />\n    </ToggleButton>,\n    <ToggleButton value=\"center\" key=\"center\">\n      <FormatAlignCenterIcon />\n    </ToggleButton>,\n    <ToggleButton value=\"right\" key=\"right\">\n      <FormatAlignRightIcon />\n    </ToggleButton>,\n    <ToggleButton value=\"justify\" key=\"justify\">\n      <FormatAlignJustifyIcon />\n    </ToggleButton>,\n  ];\n\n  const control = {\n    value: alignment,\n    onChange: handleChange,\n    exclusive: true,\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        // TODO Replace with Stack\n        '& > :not(style) + :not(style)': { mt: 2 },\n      }}\n    >\n      <ToggleButtonGroup size=\"small\" {...control}>\n        {children}\n      </ToggleButtonGroup>\n      <ToggleButtonGroup {...control}>{children}</ToggleButtonGroup>\n      <ToggleButtonGroup size=\"large\" {...control}>\n        {children}\n      </ToggleButtonGroup>\n    </Box>\n  );\n}\n",jsxPreview:'<ToggleButtonGroup size="small" {...control}>\n  {children}\n</ToggleButtonGroup>\n<ToggleButtonGroup {...control}>{children}</ToggleButtonGroup>\n<ToggleButtonGroup size="large" {...control}>\n  {children}\n</ToggleButtonGroup>',moduleTS:"./ToggleButtonSizes.js",rawTS:"import * as React from 'react';\nimport FormatAlignLeftIcon from '@mui/icons-material/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@mui/icons-material/FormatAlignCenter';\nimport FormatAlignRightIcon from '@mui/icons-material/FormatAlignRight';\nimport FormatAlignJustifyIcon from '@mui/icons-material/FormatAlignJustify';\nimport Box from '@mui/material/Box';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nexport default function ToggleButtonSizes() {\n  const [alignment, setAlignment] = React.useState('left');\n\n  const handleChange = (\n    event: React.MouseEvent<HTMLElement>,\n    newAlignment: string,\n  ) => {\n    setAlignment(newAlignment);\n  };\n\n  const children = [\n    <ToggleButton value=\"left\" key=\"left\">\n      <FormatAlignLeftIcon />\n    </ToggleButton>,\n    <ToggleButton value=\"center\" key=\"center\">\n      <FormatAlignCenterIcon />\n    </ToggleButton>,\n    <ToggleButton value=\"right\" key=\"right\">\n      <FormatAlignRightIcon />\n    </ToggleButton>,\n    <ToggleButton value=\"justify\" key=\"justify\">\n      <FormatAlignJustifyIcon />\n    </ToggleButton>,\n  ];\n\n  const control = {\n    value: alignment,\n    onChange: handleChange,\n    exclusive: true,\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        // TODO Replace with Stack\n        '& > :not(style) + :not(style)': { mt: 2 },\n      }}\n    >\n      <ToggleButtonGroup size=\"small\" {...control}>\n        {children}\n      </ToggleButtonGroup>\n      <ToggleButtonGroup {...control}>{children}</ToggleButtonGroup>\n      <ToggleButtonGroup size=\"large\" {...control}>\n        {children}\n      </ToggleButtonGroup>\n    </Box>\n  );\n}\n"},"CustomizedDividers.js":{module:"./CustomizedDividers.js",raw:"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport FormatAlignLeftIcon from '@mui/icons-material/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@mui/icons-material/FormatAlignCenter';\nimport FormatAlignRightIcon from '@mui/icons-material/FormatAlignRight';\nimport FormatAlignJustifyIcon from '@mui/icons-material/FormatAlignJustify';\nimport FormatBoldIcon from '@mui/icons-material/FormatBold';\nimport FormatItalicIcon from '@mui/icons-material/FormatItalic';\nimport FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';\nimport FormatColorFillIcon from '@mui/icons-material/FormatColorFill';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport Divider from '@mui/material/Divider';\nimport Paper from '@mui/material/Paper';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nconst StyledToggleButtonGroup = styled(ToggleButtonGroup)(({ theme }) => ({\n  '& .MuiToggleButtonGroup-grouped': {\n    margin: theme.spacing(0.5),\n    border: 0,\n    '&.Mui-disabled': {\n      border: 0,\n    },\n    '&:not(:first-of-type)': {\n      borderRadius: theme.shape.borderRadius,\n    },\n    '&:first-of-type': {\n      borderRadius: theme.shape.borderRadius,\n    },\n  },\n}));\n\nexport default function CustomizedDividers() {\n  const [alignment, setAlignment] = React.useState('left');\n  const [formats, setFormats] = React.useState(() => ['italic']);\n\n  const handleFormat = (event, newFormats) => {\n    setFormats(newFormats);\n  };\n\n  const handleAlignment = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  return (\n    <div>\n      <Paper\n        elevation={0}\n        sx={{\n          display: 'flex',\n          border: (theme) => `1px solid ${theme.palette.divider}`,\n          flexWrap: 'wrap',\n        }}\n      >\n        <StyledToggleButtonGroup\n          size=\"small\"\n          value={alignment}\n          exclusive\n          onChange={handleAlignment}\n          aria-label=\"text alignment\"\n        >\n          <ToggleButton value=\"left\" aria-label=\"left aligned\">\n            <FormatAlignLeftIcon />\n          </ToggleButton>\n          <ToggleButton value=\"center\" aria-label=\"centered\">\n            <FormatAlignCenterIcon />\n          </ToggleButton>\n          <ToggleButton value=\"right\" aria-label=\"right aligned\">\n            <FormatAlignRightIcon />\n          </ToggleButton>\n          <ToggleButton value=\"justify\" aria-label=\"justified\" disabled>\n            <FormatAlignJustifyIcon />\n          </ToggleButton>\n        </StyledToggleButtonGroup>\n        <Divider flexItem orientation=\"vertical\" sx={{ mx: 0.5, my: 1 }} />\n        <StyledToggleButtonGroup\n          size=\"small\"\n          value={formats}\n          onChange={handleFormat}\n          aria-label=\"text formatting\"\n        >\n          <ToggleButton value=\"bold\" aria-label=\"bold\">\n            <FormatBoldIcon />\n          </ToggleButton>\n          <ToggleButton value=\"italic\" aria-label=\"italic\">\n            <FormatItalicIcon />\n          </ToggleButton>\n          <ToggleButton value=\"underlined\" aria-label=\"underlined\">\n            <FormatUnderlinedIcon />\n          </ToggleButton>\n          <ToggleButton value=\"color\" aria-label=\"color\" disabled>\n            <FormatColorFillIcon />\n            <ArrowDropDownIcon />\n          </ToggleButton>\n        </StyledToggleButtonGroup>\n      </Paper>\n    </div>\n  );\n}\n",moduleTS:"./CustomizedDividers.js",rawTS:"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport FormatAlignLeftIcon from '@mui/icons-material/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@mui/icons-material/FormatAlignCenter';\nimport FormatAlignRightIcon from '@mui/icons-material/FormatAlignRight';\nimport FormatAlignJustifyIcon from '@mui/icons-material/FormatAlignJustify';\nimport FormatBoldIcon from '@mui/icons-material/FormatBold';\nimport FormatItalicIcon from '@mui/icons-material/FormatItalic';\nimport FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';\nimport FormatColorFillIcon from '@mui/icons-material/FormatColorFill';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport Divider from '@mui/material/Divider';\nimport Paper from '@mui/material/Paper';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nconst StyledToggleButtonGroup = styled(ToggleButtonGroup)(({ theme }) => ({\n  '& .MuiToggleButtonGroup-grouped': {\n    margin: theme.spacing(0.5),\n    border: 0,\n    '&.Mui-disabled': {\n      border: 0,\n    },\n    '&:not(:first-of-type)': {\n      borderRadius: theme.shape.borderRadius,\n    },\n    '&:first-of-type': {\n      borderRadius: theme.shape.borderRadius,\n    },\n  },\n}));\n\nexport default function CustomizedDividers() {\n  const [alignment, setAlignment] = React.useState('left');\n  const [formats, setFormats] = React.useState(() => ['italic']);\n\n  const handleFormat = (\n    event: React.MouseEvent<HTMLElement>,\n    newFormats: string[],\n  ) => {\n    setFormats(newFormats);\n  };\n\n  const handleAlignment = (\n    event: React.MouseEvent<HTMLElement>,\n    newAlignment: string,\n  ) => {\n    setAlignment(newAlignment);\n  };\n\n  return (\n    <div>\n      <Paper\n        elevation={0}\n        sx={{\n          display: 'flex',\n          border: (theme) => `1px solid ${theme.palette.divider}`,\n          flexWrap: 'wrap',\n        }}\n      >\n        <StyledToggleButtonGroup\n          size=\"small\"\n          value={alignment}\n          exclusive\n          onChange={handleAlignment}\n          aria-label=\"text alignment\"\n        >\n          <ToggleButton value=\"left\" aria-label=\"left aligned\">\n            <FormatAlignLeftIcon />\n          </ToggleButton>\n          <ToggleButton value=\"center\" aria-label=\"centered\">\n            <FormatAlignCenterIcon />\n          </ToggleButton>\n          <ToggleButton value=\"right\" aria-label=\"right aligned\">\n            <FormatAlignRightIcon />\n          </ToggleButton>\n          <ToggleButton value=\"justify\" aria-label=\"justified\" disabled>\n            <FormatAlignJustifyIcon />\n          </ToggleButton>\n        </StyledToggleButtonGroup>\n        <Divider flexItem orientation=\"vertical\" sx={{ mx: 0.5, my: 1 }} />\n        <StyledToggleButtonGroup\n          size=\"small\"\n          value={formats}\n          onChange={handleFormat}\n          aria-label=\"text formatting\"\n        >\n          <ToggleButton value=\"bold\" aria-label=\"bold\">\n            <FormatBoldIcon />\n          </ToggleButton>\n          <ToggleButton value=\"italic\" aria-label=\"italic\">\n            <FormatItalicIcon />\n          </ToggleButton>\n          <ToggleButton value=\"underlined\" aria-label=\"underlined\">\n            <FormatUnderlinedIcon />\n          </ToggleButton>\n          <ToggleButton value=\"color\" aria-label=\"color\" disabled>\n            <FormatColorFillIcon />\n            <ArrowDropDownIcon />\n          </ToggleButton>\n        </StyledToggleButtonGroup>\n      </Paper>\n    </div>\n  );\n}\n"}},hn={"./ToggleButtons.js":function(){var n=s.useState("left"),e=(0,u.Z)(n,2),t=e[0],r=e[1];return(0,v.jsxs)(h.Z,{value:t,exclusive:!0,onChange:function(n,e){r(e)},"aria-label":"text alignment",children:[o||(o=(0,v.jsx)(m.Z,{value:"left","aria-label":"left aligned",children:(0,v.jsx)(c.default,{})})),a||(a=(0,v.jsx)(m.Z,{value:"center","aria-label":"centered",children:(0,v.jsx)(g.default,{})})),l||(l=(0,v.jsx)(m.Z,{value:"right","aria-label":"right aligned",children:(0,v.jsx)(d.default,{})})),i||(i=(0,v.jsx)(m.Z,{value:"justify","aria-label":"justified",disabled:!0,children:(0,v.jsx)(p.default,{})}))]})},"./ToggleButtonsMultiple.js":function(){var n=s.useState((function(){return["bold","italic"]})),e=(0,u.Z)(n,2),t=e[0],o=e[1];return(0,v.jsxs)(h.Z,{value:t,onChange:function(n,e){o(e)},"aria-label":"text formatting",children:[f||(f=(0,v.jsx)(m.Z,{value:"bold","aria-label":"bold",children:(0,v.jsx)(k.default,{})})),b||(b=(0,v.jsx)(m.Z,{value:"italic","aria-label":"italic",children:(0,v.jsx)(x.default,{})})),T||(T=(0,v.jsx)(m.Z,{value:"underlined","aria-label":"underlined",children:(0,v.jsx)(y.default,{})})),B||(B=(0,v.jsxs)(m.Z,{value:"color","aria-label":"color",disabled:!0,children:[(0,v.jsx)(w.default,{}),(0,v.jsx)(A.default,{})]}))]})},"./VerticalToggleButtons.js":function(){var n=s.useState("list"),e=(0,u.Z)(n,2),t=e[0],o=e[1];return(0,v.jsxs)(h.Z,{orientation:"vertical",value:t,exclusive:!0,onChange:function(n,e){o(e)},children:[j||(j=(0,v.jsx)(m.Z,{value:"list","aria-label":"list",children:(0,v.jsx)(G.default,{})})),F||(F=(0,v.jsx)(m.Z,{value:"module","aria-label":"module",children:(0,v.jsx)(R.default,{})})),I||(I=(0,v.jsx)(m.Z,{value:"quilt","aria-label":"quilt",children:(0,v.jsx)(M.default,{})}))]})},"./ColorToggleButton.js":function(){var n=s.useState("web"),e=(0,u.Z)(n,2),t=e[0],o=e[1];return(0,v.jsxs)(h.Z,{color:"primary",value:t,exclusive:!0,onChange:function(n,e){o(e)},children:[z||(z=(0,v.jsx)(m.Z,{value:"web",children:"Web"})),C||(C=(0,v.jsx)(m.Z,{value:"android",children:"Android"})),S||(S=(0,v.jsx)(m.Z,{value:"ios",children:"iOS"}))]})},"./ToggleButtonNotEmpty.js":function(){var n=s.useState("left"),e=(0,u.Z)(n,2),t=e[0],o=e[1],a=s.useState((function(){return["phone"]})),l=(0,u.Z)(a,2),i=l[0],r=l[1];return(0,v.jsxs)(O.Z,{direction:"row",spacing:4,children:[(0,v.jsxs)(h.Z,{value:t,exclusive:!0,onChange:function(n,e){null!==e&&o(e)},"aria-label":"text alignment",children:[V||(V=(0,v.jsx)(m.Z,{value:"left","aria-label":"left aligned",children:(0,v.jsx)(c.default,{})})),H||(H=(0,v.jsx)(m.Z,{value:"center","aria-label":"centered",children:(0,v.jsx)(g.default,{})})),D||(D=(0,v.jsx)(m.Z,{value:"right","aria-label":"right aligned",children:(0,v.jsx)(d.default,{})}))]}),(0,v.jsxs)(h.Z,{value:i,onChange:function(n,e){e.length&&r(e)},"aria-label":"device",children:[Z||(Z=(0,v.jsx)(m.Z,{value:"laptop","aria-label":"laptop",children:(0,v.jsx)(_.default,{})})),L||(L=(0,v.jsx)(m.Z,{value:"tv","aria-label":"tv",children:(0,v.jsx)(q.default,{})})),P||(P=(0,v.jsx)(m.Z,{value:"phone","aria-label":"phone",children:(0,v.jsx)(E.default,{})}))]})]})},"./StandaloneToggleButton.js":function(){var n=s.useState(!1),e=(0,u.Z)(n,2),t=e[0],o=e[1];return(0,v.jsx)(m.Z,{value:"check",selected:t,onChange:function(){o(!t)},children:N||(N=(0,v.jsx)(J.default,{}))})},"./ToggleButtonSizes.js":function(){var n=s.useState("left"),e=(0,u.Z)(n,2),t=e[0],o=e[1],a=[U||(U=(0,v.jsx)(m.Z,{value:"left",children:(0,v.jsx)(c.default,{})},"left")),Q||(Q=(0,v.jsx)(m.Z,{value:"center",children:(0,v.jsx)(g.default,{})},"center")),W||(W=(0,v.jsx)(m.Z,{value:"right",children:(0,v.jsx)(d.default,{})},"right")),Y||(Y=(0,v.jsx)(m.Z,{value:"justify",children:(0,v.jsx)(p.default,{})},"justify"))],l={value:t,onChange:function(n,e){o(e)},exclusive:!0};return(0,v.jsxs)(X.Z,{sx:{display:"flex",flexDirection:"column",alignItems:"center","& > :not(style) + :not(style)":{mt:2}},children:[(0,v.jsx)(h.Z,(0,K.Z)((0,K.Z)({size:"small"},l),{},{children:a})),(0,v.jsx)(h.Z,(0,K.Z)((0,K.Z)({},l),{},{children:a})),(0,v.jsx)(h.Z,(0,K.Z)((0,K.Z)({size:"large"},l),{},{children:a}))]})},"./CustomizedDividers.js":function(){var n=s.useState("left"),e=(0,u.Z)(n,2),t=e[0],o=e[1],a=s.useState((function(){return["italic"]})),l=(0,u.Z)(a,2),i=l[0],r=l[1];return(0,v.jsx)("div",{children:(0,v.jsxs)(cn.Z,{elevation:0,sx:{display:"flex",border:function(n){return"1px solid ".concat(n.palette.divider)},flexWrap:"wrap"},children:[(0,v.jsxs)(gn,{size:"small",value:t,exclusive:!0,onChange:function(n,e){o(e)},"aria-label":"text alignment",children:[$||($=(0,v.jsx)(m.Z,{value:"left","aria-label":"left aligned",children:(0,v.jsx)(c.default,{})})),nn||(nn=(0,v.jsx)(m.Z,{value:"center","aria-label":"centered",children:(0,v.jsx)(g.default,{})})),en||(en=(0,v.jsx)(m.Z,{value:"right","aria-label":"right aligned",children:(0,v.jsx)(d.default,{})})),tn||(tn=(0,v.jsx)(m.Z,{value:"justify","aria-label":"justified",disabled:!0,children:(0,v.jsx)(p.default,{})}))]}),(0,v.jsx)(un.Z,{flexItem:!0,orientation:"vertical",sx:{mx:.5,my:1}}),(0,v.jsxs)(gn,{size:"small",value:i,onChange:function(n,e){r(e)},"aria-label":"text formatting",children:[on||(on=(0,v.jsx)(m.Z,{value:"bold","aria-label":"bold",children:(0,v.jsx)(k.default,{})})),an||(an=(0,v.jsx)(m.Z,{value:"italic","aria-label":"italic",children:(0,v.jsx)(x.default,{})})),ln||(ln=(0,v.jsx)(m.Z,{value:"underlined","aria-label":"underlined",children:(0,v.jsx)(y.default,{})})),sn||(sn=(0,v.jsxs)(m.Z,{value:"color","aria-label":"color",disabled:!0,children:[(0,v.jsx)(w.default,{}),(0,v.jsx)(A.default,{})]}))]})]})})}};function vn(){return dn||(dn=(0,v.jsx)(r.Z,{demos:mn,docs:pn,demoComponents:hn}))}},35261:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/react-toggle-button",function(){return t(145862)}])},265437:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"m7 10 5 5 5-5z"}),"ArrowDropDown");e.default=i},467778:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"}),"Check");e.default=i},795502:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M7 15v2h10v-2H7zm-4 6h18v-2H3v2zm0-8h18v-2H3v2zm4-6v2h10V7H7zM3 3v2h18V3H3z"}),"FormatAlignCenter");e.default=i},831933:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M3 21h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18V7H3v2zm0-6v2h18V3H3z"}),"FormatAlignJustify");e.default=i},975536:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M15 15H3v2h12v-2zm0-8H3v2h12V7zM3 13h18v-2H3v2zm0 8h18v-2H3v2zM3 3v2h18V3H3z"}),"FormatAlignLeft");e.default=i},41653:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z"}),"FormatAlignRight");e.default=i},894586:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z"}),"FormatBold");e.default=i},242889:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M16.56 8.94 7.62 0 6.21 1.41l2.38 2.38-5.15 5.15c-.59.59-.59 1.54 0 2.12l5.5 5.5c.29.29.68.44 1.06.44s.77-.15 1.06-.44l5.5-5.5c.59-.58.59-1.53 0-2.12zM5.21 10 10 5.21 14.79 10H5.21zM19 11.5s-2 2.17-2 3.5c0 1.1.9 2 2 2s2-.9 2-2c0-1.33-2-3.5-2-3.5zM2 20h20v4H2v-4z"}),"FormatColorFill");e.default=i},293318:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z"}),"FormatItalic");e.default=i},423307:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z"}),"FormatUnderlined");e.default=i},92863:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M20 18c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2H0v2h24v-2h-4zM4 6h16v10H4V6z"}),"Laptop");e.default=i},731527:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M16 1H8C6.34 1 5 2.34 5 4v16c0 1.66 1.34 3 3 3h8c1.66 0 3-1.34 3-3V4c0-1.66-1.34-3-3-3zm-2 20h-4v-1h4v1zm3.25-3H6.75V4h10.5v14z"}),"PhoneAndroid");e.default=i},39922:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M21 3H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.1-.9-2-2-2zm0 14H3V5h18v12z"}),"Tv");e.default=i},131557:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M3 14h4v-4H3v4zm0 5h4v-4H3v4zM3 9h4V5H3v4zm5 5h13v-4H8v4zm0 5h13v-4H8v4zM8 5v4h13V5H8z"}),"ViewList");e.default=i},869352:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M14.67 5v6.5H9.33V5h5.34zm1 6.5H21V5h-5.33v6.5zm-1 7.5v-6.5H9.33V19h5.34zm1-6.5V19H21v-6.5h-5.33zm-7.34 0H3V19h5.33v-6.5zm0-1V5H3v6.5h5.33z"}),"ViewModule");e.default=i},398977:function(n,e,t){"use strict";var o=t(307914);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=o(t(122268)),l=t(824246),i=(0,a.default)((0,l.jsx)("path",{d:"M21 5v6.5H9.33V5H21zm-6.33 14v-6.5H9.33V19h5.34zm1-6.5V19H21v-6.5h-5.33zM8.33 19V5H3v14h5.33z"}),"ViewQuilt");e.default=i}},function(n){n.O(0,[64631,31194,72773,31659,16950,37141,91895,63463,61980,45387,892,2798,30170,20365,60630,25747,84041,26035,37218,67414,90478,30016,94616,49774,92888,40179],(function(){return e=35261,n(n.s=e);var e}));var e=n.O();_N_E=e}]);